# Preparing a MGEN host for the DOW Pentek system
# ==============================================
# 
# Hardware
# --------
# 
# This is generally a LENOVO server with hardware RAID.
# 
# Video card:
# 
#   Install good Nvidia graphics card, e.g. GeForce GT 610
# 

# Install OS from USB
# -------------------
# 
# The following notes are from the install for Scientific LINUX 7.4:
# 
#   English keyboard
#   Time: GMT
#   Hostname: mgen6, mgen7 etc.
#   
#   Create custom disk partition layout:
# 
#    /swap      16 GB
#    /boot      1  GB
#    /boot-EFI  1  GB
#    /          50 GB
#    /home      50 GB
#    /data      the rest
# 
#   Type of install:
#     KDE Plasma workstation
#     add development tools
#     add open office
#
#   After install:
#   
#     Perform software update from menu.
#   
#   Add titan5 user:
# 
#     Add user titan5
#     Change titan5 shell to /bin/csh using 'chsh'.

# Checking the MegaRaid
# ---------------------

# If the mgen is using a MegaRaid, you can check this device either at
# boot time via the bios, or using a runtime app.

# To download and install the app:
# (as root)

  cd /tmp
  wget http://www.avagotech.com/docs-and-downloads/raid-controllers/raid-controllers-common-files/8-07-14_MegaCLI.zip
  unzip 8-07-14_MegaCLI.zip
  cd Linux
  yum install -y MegaCli-8.07.14-1.noarch.rpm

# To run the app
#
# List all properties:

  /opt/MegaRAID/MegaCli/MegaCli64 -AdpAllInfo -aAll

# List the log

  /opt/MegaRAID/MegaCli/MegaCli64 -AdpAlILog -aAll
  
# list virtual drive information

  /opt/MegaRAID/MegaCli/MegaCli64 -LDInfo -LALL -aALL

# Install packages
# ----------------

# You can install these with these commands

yum install -y epel-release

yum install -y \
tcsh perl perl-Env ftp git svn cvs tkcvs emacs tkcvs m4 \
gcc gcc-c++ gcc-gfortran glibc-devel libX11-devel libXext-devel \
libpng-devel libtiff-devel jasper-devel zlib-devel bzip2-devel expat-devel \
flex-devel fftw3-devel bzip2-devel jasper-devel qt5-qtbase-devel xrdb \
Xvfb xorg-x11-fonts-misc xorg-x11-fonts-75dpi xorg-x11-fonts-100dpi \
gnuplot ImageMagick-devel ImageMagick-c++-devel log4cpp-devel \
qwt-devel glut-devel compat-libstdc++-296.i686 \
compat-libstdc++-33.i686 boost-devel \
perl-Env kernel-devel gnuplot scons

# Install 32-bit packages if you want CIDD
# ----------------------------------------

# do the following for 32-bit runtime support

  yum install -y glibc-devel.i686 libX11-devel.i686 \
      libXext-devel.i686 libjpeg-devel.i686 libpng-devel.i686 \
      libstdc++-devel.i686 libtiff-devel.i686

# do the following for 32-bit compile support for CIDD

  yum -y install --skip-broken glibc.i686 \
      audiofile.i686 bzip2-libs.i686 cairo.i686 cyrus-sasl-lib.i686 \
      dbus-libs.i686 fltk.i686 freeglut.i686 gtk2.i686 \
      libacl.i686 libao.i686 libattr.i686 libcap.i686 libdrm.i686 \
      libexif.i686 libgnomecanvas.i686 libICE.i686 libieee1284.i686 \
      libsigc++20.i686 libSM.i686 libtool-ltdl.i686 libusb.i686 libwmf.i686 \
      libwmf-lite.i686 libX11.i686 libXau.i686 libXaw.i686 libXcomposite.i686 \
      libXdamage.i686 libXdmcp.i686 libXext.i686 libXfixes.i686 libxkbfile.i686 \
      libxml2.i686 libXmu.i686 libXp.i686 libXpm.i686 libXScrnSaver.i686 \
      libxslt.i686 libXt.i686 libXtst.i686 libXv.i686 libXxf86vm.i686 \
      lzo.i686 mesa-libGL.i686 mesa-libGLU.i686 \
      openldap.i686 pam.i686 popt.i686 pulseaudio-libs.i686 \
      sane-backends-libs.i686 SDL.i686 unixODBC.i686 zlib.i686 \
      compat-libstdc++-33.i686 redhat-lsb.i686 alsa-plugins-pulseaudio.i686 \
      alsa-plugins-oss.i686 alsa-lib.i686 libXv.i686 \
      libXScrnSaver.i686 qt.i686 qt-x11.i686 pulseaudio-libs.i686 \
      pulseaudio-libs-glib2.i686 alsa-plugins-pulseaudio.i686 \
      jasper-devel.i686 zlib-devel.i686 bzip2-devel.i686 expat-devel.i686 \
      flex-devel.i686 fftw-devel.i686

# Install google-chrome
# ---------------------

# create repo file, with google-chrome details:

  touch /etc/yum.repos.d/google-chrome.repo

# edit the file, to contain the following contents:

[google-chrome]
name=google-chrome
baseurl=http://dl.google.com/linux/chrome/rpm/stable/$basearch
enabled=1
gpgcheck=1
gpgkey=https://dl-ssl.google.com/linux/linux_signing_key.pub

# install chrome

  yum install google-chrome-stable

# Install NVIDIA driver
# ---------------------
#
# See:
#
#  https://www.dedoimedo.com/computers/centos-7-nvidia-second.html
#  http://elrepo.org/tiki/tiki-index.php

  rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org
  yum install -y http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm
  yum install -y nvidia-detect.x86_64
  yum install -y kmod-nvidia-340xx.x86_64 nvidia-x11-drv-340xx.x86_64

# this last step takes a while

  reboot

# Alternative - install vendor NVIDIA driver:
#  
#  yum install nvidia-x11-drv

# QT
# --

# Make link for qmake

  cd /usr/bin
  ln -s qmake-qt5 qmake

# Install anaconda for python 2.7
---------------------------------

Go to the anaconda web site:

  https://www.continuum.io/downloads

download anaconda2 and install in $HOME.

# disable unwanted services - firewall
--------------------------------------

  systemctl disable ip6tables
  systemctl disable iptables
  systemctl disable firewalld

# disable SELINUX
-----------------

In

  /etc/sysconfig/selinux

set

  SELINUX=disabled

# Install Java JDK
# ----------------

# Download Java JDK tar file from Oracle.

# For example: 

  jdk-8u72-linux-x64.tar.gz

# As root:

  mkdir /usr/java
  cd /usr/java
  cp jdk-8u72-linux-x64.tar.gz .
  tar xvfz jdk-8u72-linux-x64.tar.gz
  ln -s jdk1.8.0_72 latest

# So that you can reference java using:

  /usr/java/latest/bin/java

# and JAVA_HOME will be set to:

  setenv JAVA_HOME /usr/java/latest

# Install ant
# -----------

# Download ant from:

  http://ant.apache.org

# Normally we grab the .gz file, e.g. apache-ant-1.9.4-bin.tar.gz
# Untar the file and copy the contents to

  /usr/local/ant

# Check out LROSE
# ---------------

  mkdir ~/git
  cd ~/git
  git clone https://github.com/ncar/lrose-core
  git clone https://github.com/ncar/lrose-netcdf

# Check out titan cswr project
# ----------------------------

  cd ~/git
  git clone https://github.com/ncar/titan-cswr

# set up cshrc file
# -----------------

  cd
  rm .cshrc
  ln -s git/titan-cswr/projDir/system/dotfiles/cshrc .cshrc
  source ~/.cshrc

# Build LROSE
# -----------

  cd ~/git/lrose-netcdf
  ./build_and_install_netcdf

  cd ~/git/lrose-core
  ./build/build_lrose.ncar
  
# Link /usr/local/lrose
# ---------------------

# As root:

  cd /usr/local
  ln -s ~titan5/lrose

# Configure project
# -----------------

  sudo mkdir -p /data/dow
  sudo chown titan5 /data/dow

  cd ~/git/titan-cswr/projDir/system/scripts
  ./configureHost.py

# select host type 'mgen'

  source ~/.cshrc

