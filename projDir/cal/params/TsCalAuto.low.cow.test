/**********************************************************************
 * TDRP params for ./TsCalAuto
 **********************************************************************/

//======================================================================
//
// TsCalAuto analyses radar calibration data.
//
//======================================================================
 
//======================================================================
//
// DEBUGGING AND PROCESS CONTROL.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
// If set, debug messages will be printed appropriately.
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//

debug = DEBUG_NORM;

///////////// instance ////////////////////////////////
//
// Process instance.
// Used for registration with procmap.
// Type: string
//

instance = "low.cow.test";

///////////// register_with_procmap ///////////////////
//
// Option to register with the process mapper.
// If true, this application will try to register with procmap once per 
//   minute. (If unable to do so, no error occurs.).
// Type: boolean
//

register_with_procmap = FALSE;

//======================================================================
//
// TIME SERIES - INPUT DATA.
//
//======================================================================
 
///////////// input_fmq_path //////////////////////////
//
// Path to time series FMQ.
// Type: string
//

input_fmq_path = "$(DATA_DIR)/fmq/ts/shmem_low_with_angles_10400";

///////////// n_samples ///////////////////////////////
//
// Number of pulse samples to average for cal data.
// Type: int
//

n_samples = 5000;

///////////// start_gate //////////////////////////////
//
// Gate number for start of averaging.
// Type: int
//

start_gate = 50;

///////////// n_gates /////////////////////////////////
//
// Number of gates for averaging.
// Type: int
//

n_gates = 500;

///////////// fast_alternating_mode ///////////////////
//
// Is the radar running in dual-pol fast alternating mode?.
// If not, set to FALSE.
// Type: boolean
//

fast_alternating_mode = FALSE;

//======================================================================
//
// SIGNAL GENERATOR CONTROL.
//
//======================================================================
 
///////////// siggen_tcp_port /////////////////////////
//
// TCP port for SIGGEN.
// Type: int
//

// siggen_tcp_port = 5025; // Schwartz
siggen_tcp_port = 7777; // Agilent E8244A

///////////// siggen_ip_address ///////////////////////
//
// IP address for SIGGEN.
// Type: string
//

siggen_ip_address = "siggen";

///////////// siggen_max_power ////////////////////////
//
// Max power for siggen signal (dBm).
// Type: double
//

siggen_max_power = -25;

///////////// siggen_min_power ////////////////////////
//
// Min power for siggen signal (dBm).
// Type: double
//

siggen_min_power = -120;

///////////// siggen_delta_power //////////////////////
//
// Power step for siggen (dBm).
// Type: double
//

siggen_delta_power = 5;

///////////// siggen_frequency ////////////////////////
//
// Siggen frequency (GHz).
// This matches the radar frequency.
// Type: double
//

siggen_frequency = $(LOW_FREQ_GHZ);

///////////// use_manual_siggen_control ///////////////
//
// Option to manually set the siggen.
// Use for testing etc.
// Type: boolean
//

use_manual_siggen_control = FALSE;

//======================================================================
//
// CALIBRATION PROCEDURE PARAMETERS.
//
//======================================================================
 
///////////// radarName ///////////////////////////////
//
// Radar name.
// Type: string
//

radarName = "$(RADAR_NAME)";

///////////// xmitPowerDbmH ///////////////////////////
//
// Transmitter peak power H (dBm).
// Type: double
//

xmitPowerDbmH = $(LOW_XMIT_POWER_H_DBM);

///////////// xmitPowerDbmV ///////////////////////////
//
// Transmitter peak power V (dBm).
// Type: double
//

xmitPowerDbmV = $(LOW_XMIT_POWER_V_DBM);

///////////// pulseWidthUs ////////////////////////////
//
// Transmit pulse width (micro_secs).
// Type: double
//

pulseWidthUs = 1.0;

///////////// beamWidthDegH ///////////////////////////
//
// Antenna 3dB beam width H (deg).
// Type: double
//

beamWidthDegH = 1;

///////////// beamWidthDegV ///////////////////////////
//
// Antenna 3dB beam width V (deg).
// Type: double
//

beamWidthDegV = 1;

///////////// antGainDbH //////////////////////////////
//
// Antenna gain H (dB).
// Type: double
//

antGainDbH = $(ANTENNA_GAIN_H_DB);

///////////// antGainDbV //////////////////////////////
//
// Antenna gain V (dB).
// Type: double
//

antGainDbV = $(ANTENNA_GAIN_V_DB);

///////////// twoWayWaveguideLossDbH //////////////////
//
// 2-way waveguide loss H (dB).
// This is the loss from the measurement plane to the feed-horn and 
//   back. Sometimes it is set to 0 and the loss is incorporated in the 
//   antenna gain.
// Type: double
//

twoWayWaveguideLossDbH = $(TWO_WAY_WAVEGUIDE_LOSS_H_DB);

///////////// twoWayWaveguideLossDbV //////////////////
//
// 2-way waveguide loss V (dB).
// This is the loss from the measurement plane to the feed-horn and 
//   back. Sometimes it is set to 0 and the loss is incorporated in the 
//   antenna gain.
// Type: double
//

twoWayWaveguideLossDbV = $(TWO_WAY_WAVEGUIDE_LOSS_V_DB);

///////////// twoWayRadomeLossDbH /////////////////////
//
// 2-way loss through the radome - H.
// Set to 0 if no radome.
// Type: double
//

twoWayRadomeLossDbH = 0;

///////////// twoWayRadomeLossDbV /////////////////////
//
// 2-way loss through the radome - V.
// Set to 0 if no radome.
// Type: double
//

twoWayRadomeLossDbV = 0;

///////////// receiverMismatchLossDb //////////////////
//
// Receiver mismatch loss - (dB).
// This is the loss which results from the fact that the receiver 
//   bandwidth is not exactly the same as the pulse width. The calibration 
//   procedure is carries out with a CW signal, so the redeiver bandwidth 
//   is not a factor. However, during operations, the receiver loses some 
//   power because of the bandwidth mismatch. This loss must be taken into 
//   account.
// Type: double
//

receiverMismatchLossDb = 1.65;

///////////// noiseSourcePowerDbmH ////////////////////
//
// Noise source power - H (dBm).
// Some operational calibrations are computed with a calbrated noise 
//   source of known power.
// Type: double
//

noiseSourcePowerDbmH = -9999;

///////////// noiseSourcePowerDbmV ////////////////////
//
// Noise source power - V (dBm).
// Some operational calibrations are computed with a calbrated noise 
//   source of known power.
// Type: double
//

noiseSourcePowerDbmV = -9999;

///////////// powerMeasLossDbH ////////////////////////
//
// Power measurement loss - H (dBm).
// This is the power loss from the signal generator to the waveguide 
//   coupler.
// Type: double
//

powerMeasLossDbH = 0;

///////////// powerMeasLossDbV ////////////////////////
//
// Power measurement loss - V (dBm).
// This is the power loss from the signal generator to the waveguide 
//   coupler.
// Type: double
//

powerMeasLossDbV = 0;

///////////// couplerForwardLossDbH ///////////////////
//
// Coupler loss - H (dB).
// This is the power loss in the directional coupler itself.
// Type: double
//

couplerForwardLossDbH = $(LOW_COUPLER_LOSS_H_DB);

///////////// couplerForwardLossDbV ///////////////////
//
// Coupler loss - V (dB).
// This is the power loss in the directional coupler itself.
// Type: double
//

couplerForwardLossDbV = $(LOW_COUPLER_LOSS_V_DB);

///////////// systemPhidpDeg //////////////////////////
//
// System PHIDP (deg).
// This is the approximate PHIDP value in the meteorlogical echo closest 
//   to the radar. Compute PHIDP is corrected using this value, so that 
//   the computed PHIDP closest to the radar is set to a value which 
//   minimizes the chance of folding.
// Type: double
//

systemPhidpDeg = -70;

//======================================================================
//
// ANALYSIS PARAMETERS.
//
//======================================================================
 
///////////// linear_region_min_power /////////////////
//
// power value at lower end of linear region (dBm).
// Type: double
//

linear_region_min_power = -85;

///////////// linear_region_max_power /////////////////
//
// power value at upper end of linear region (dBm).
// Type: double
//

linear_region_max_power = -40;

///////////// noise_region_max_power //////////////////
//
// power value at upper end of noise region (dBm).
// Type: double
//

noise_region_max_power = -120;

//======================================================================
//
// OUTPUT RESULTS.
//
//======================================================================
 
///////////// output_dir //////////////////////////////
//
// Dir for output files.
// The results will be written to sub-directories named from the cal 
//   time.
// Type: string
//

output_dir = "$(DATA_DIR)/$(RADAR_NAME)/cal/low/calib_0.5us";

///////////// plot_script /////////////////////////////
//
// If set, program will call script passing the output file names as the 
//   first argument.
// Typically, this script generates a plot and saves the output.
// Type: string
//

plot_script = "do_calplot.dyn_range";

