/**********************************************************************
 * TDRP params for RadxCov2Mom
 **********************************************************************/

//======================================================================
//
// RadxCov2Mom Reads covariances in Radx-supported format files, 
//   computes the moments and writes out the results to Radx-supported 
//   format files.
//
//======================================================================
 
//======================================================================
//
// DEBUGGING.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
// If set, debug messages will be printed appropriately.
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//     DEBUG_EXTRA
//

debug = DEBUG_OFF;

///////////// instance ////////////////////////////////
//
// Program instance for process registration.
// This application registers with procmap. This is the instance used 
//   for registration.
// Type: string
//

instance = "wband";

//======================================================================
//
// DATA INPUT.
//
//======================================================================
 
///////////// input_dir ///////////////////////////////
//
// Input directory for searching for files.
// Files will be searched for in this directory.
// Type: string
//

input_dir = ".";

///////////// mode ////////////////////////////////////
//
// Operating mode.
// In REALTIME mode, the program waits for a new input file.  In ARCHIVE 
//   mode, it moves through the data between the start and end times set 
//   on the command line. In FILELIST mode, it moves through the list of 
//   file names specified on the command line. Paths (in ARCHIVE mode, at 
//   least) MUST contain a day-directory above the data file -- 
//   ./data_file.ext will not work as a file path, but 
//   ./yyyymmdd/data_file.ext will.
//
// Type: enum
// Options:
//     REALTIME
//     ARCHIVE
//     FILELIST
//

mode = FILELIST;

///////////// max_realtime_data_age_secs //////////////
//
// Maximum age of realtime data (secs).
// Only data less old than this will be used.
// Type: int
//

max_realtime_data_age_secs = 300;

//======================================================================
//
// READ OPTIONS.
//
//======================================================================
 
///////////// aggregate_sweep_files_on_read ///////////
//
// Option to aggregate sweep files into a volume on read.
// If true, and the input data is in sweeps rather than volumes (e.g. 
//   DORADE), the sweep files from a volume will be aggregated into a 
//   volume.
// Type: boolean
//

aggregate_sweep_files_on_read = FALSE;

///////////// ignore_idle_scan_mode_on_read ///////////
//
// Option to ignore data taken in IDLE mode.
// If true, on read will ignore files with an IDLE scan mode.
// Type: boolean
//

ignore_idle_scan_mode_on_read = TRUE;

///////////// remove_rays_with_all_data_missing ///////
//
// Option to remove rays for which all data is missing.
// If true, ray data will be checked. If all fields have missing data at 
//   all gates, the ray will be removed after reading.
// Type: boolean
//

remove_rays_with_all_data_missing = FALSE;

///////////// set_max_range ///////////////////////////
//
// Option to set the max range for any ray.
// Type: boolean
//

set_max_range = FALSE;

///////////// max_range_km ////////////////////////////
//
// Specified maximim range - km.
// Gates beyond this range are removed.
// Type: double
//

max_range_km = 9999;

///////////// set_ngates_constant /////////////////////
//
// Option to force the number of gates to be constant.
// If TRUE, the number of gates on all rays will be set to the maximum, 
//   and gates added to shorter rays will be filled with missing values.
// Type: boolean
//

set_ngates_constant = FALSE;

///////////// set_fixed_angle_limits //////////////////
//
// Option to set fixed angle limits.
// Only use sweeps within the specified fixed angle limits.
// Type: boolean
//

set_fixed_angle_limits = FALSE;

///////////// lower_fixed_angle_limit /////////////////
//
// Lower fixed angle limit - degrees.
// Type: double
//

lower_fixed_angle_limit = 0;

///////////// upper_fixed_angle_limit /////////////////
//
// Upper fixed angle limit - degrees.
// Type: double
//

upper_fixed_angle_limit = 90;

///////////// set_sweep_num_limits ////////////////////
//
// Option to set sweep number limits.
// Only read sweeps within the specified sweep number limits.
// Type: boolean
//

set_sweep_num_limits = FALSE;

///////////// lower_sweep_num /////////////////////////
//
// Lower sweep number limit.
// Type: int
//

lower_sweep_num = 0;

///////////// upper_sweep_num /////////////////////////
//
// Upper sweep number limit.
// Type: int
//

upper_sweep_num = 0;

//======================================================================
//
// INPUT COVARIANCE FIELDS.
//
// Finding the names of covariance fields in the input files.
//
//======================================================================
 
///////////// input_covars ////////////////////////////
//
// Indicate which Dsr field name is to be used for each covariance.
// Set the field name for each covariance type. If the covariance is not 
//   available in the input field, it will be set to missing.
//
// Type: struct
//   typedef struct {
//      covariance_id_t field_id;
//        Options:
//          LAG0_HC_DB
//          LAG0_HX_DB
//          LAG0_VC_DB
//          LAG0_VX_DB
//          LAG0_HCVX_DB
//          LAG0_HCVX_PHASE
//          LAG0_VCHX_DB
//          LAG0_VCHX_PHASE
//          LAG1_HC_DB
//          LAG1_HC_PHASE
//          LAG1_VC_DB
//          LAG1_VC_PHASE
//          LAG1_HCVC_DB
//          LAG1_HCVC_PHASE
//          LAG1_VCHC_DB
//          LAG1_VCHC_PHASE
//          LAG1_VXHX_DB
//          LAG1_VXHX_PHASE
//          LAG2_HC_DB
//          LAG2_HC_PHASE
//          LAG2_VC_DB
//          LAG2_VC_PHASE
//          LAG3_HC_DB
//          LAG3_HC_PHASE
//          LAG3_VC_DB
//          LAG3_VC_PHASE
//          RVVHH0_DB
//          RVVHH0_PHASE
//      string field_name;
//   }
//
// 1D array - variable length.
//

input_covars = {
  {
    field_id = LAG0_HC_DB,
    field_name = "LAG0_HC_DB"
  }
  ,
  {
    field_id = LAG0_HX_DB,
    field_name = "LAG0_HX_DB"
  }
  ,
  {
    field_id = LAG0_VC_DB,
    field_name = "LAG0_VC_DB"
  }
  ,
  {
    field_id = LAG0_VX_DB,
    field_name = "LAG0_VX_DB"
  }
  ,
  {
    field_id = LAG0_HCVX_DB,
    field_name = "LAG0_HCVX_DB"
  }
  ,
  {
    field_id = LAG0_HCVX_PHASE,
    field_name = "LAG0_HCVX_PHASE"
  }
  ,
  {
    field_id = LAG0_VCHX_DB,
    field_name = "LAG0_VCHX_DB"
  }
  ,
  {
    field_id = LAG0_VCHX_PHASE,
    field_name = "LAG0_VCHX_PHASE"
  }
  ,
  {
    field_id = LAG1_HC_DB,
    field_name = "LAG1_HC_DB"
  }
  ,
  {
    field_id = LAG1_HC_PHASE,
    field_name = "LAG1_HC_PHASE"
  }
  ,
  {
    field_id = LAG1_VC_DB,
    field_name = "LAG1_VC_DB"
  }
  ,
  {
    field_id = LAG1_VC_PHASE,
    field_name = "LAG1_VC_PHASE"
  }
  ,
  {
    field_id = LAG1_HCVC_DB,
    field_name = "LAG1_HCVC_DB"
  }
  ,
  {
    field_id = LAG1_HCVC_PHASE,
    field_name = "LAG1_HCVC_PHASE"
  }
  ,
  {
    field_id = LAG1_VCHC_DB,
    field_name = "LAG1_VCHC_DB"
  }
  ,
  {
    field_id = LAG1_VCHC_PHASE,
    field_name = "LAG1_VCHC_PHASE"
  }
  ,
  {
    field_id = LAG1_VXHX_DB,
    field_name = "LAG1_VXHX_DB"
  }
  ,
  {
    field_id = LAG1_VXHX_PHASE,
    field_name = "LAG1_VXHX_PHASE"
  }
  ,
  {
    field_id = LAG2_HC_DB,
    field_name = "LAG2_HC_DB"
  }
  ,
  {
    field_id = LAG2_HC_PHASE,
    field_name = "LAG2_HC_PHASE"
  }
  ,
  {
    field_id = LAG2_VC_DB,
    field_name = "LAG2_VC_DB"
  }
  ,
  {
    field_id = LAG2_VC_PHASE,
    field_name = "LAG2_VC_PHASE"
  }
  ,
  {
    field_id = LAG3_HC_DB,
    field_name = "LAG3_HC_DB"
  }
  ,
  {
    field_id = LAG3_HC_PHASE,
    field_name = "LAG3_HC_PHASE"
  }
  ,
  {
    field_id = LAG3_VC_DB,
    field_name = "LAG3_VC_DB"
  }
  ,
  {
    field_id = LAG3_VC_PHASE,
    field_name = "LAG3_VC_PHASE"
  }
  ,
  {
    field_id = RVVHH0_DB,
    field_name = "RVVHH0_DB"
  }
  ,
  {
    field_id = RVVHH0_PHASE,
    field_name = "RVVHH0_PHASE"
  }
  ,
  {
    field_id = CPA,
    field_name = "CPA"
  }
  ,
  {
    field_id = CMD_FLAG,
    field_name = "CMD_FLAG"
  }
};

//======================================================================
//
// MOMENTS COMPUTATIONS.
//
//======================================================================
 
///////////// xmit_rcv_mode ///////////////////////////
//
// Transmit/receive mode.
// This governs the type of moments computations to be applied.
// 	SINGLE_POL:
// 		Single polarization
// 	DUAL_POL_ALT_HV_CO_ONLY:
// 		Dual pol, alternating transmission
// 		          copolar receiver only
// 	DUAL_POL_ALT_HV_CO_CROSS:
// 		Dual pol, alternating transmission
// 		          co-polar and cross-polar receivers
// 	DUAL_POL_SIM_HV:
// 		Dual pol, simultaneous transmit/receive
// 	DUAL_POL_H_ONLY:
// 		Dual pol, H transmission
// 		          simultaneous H and V receive
// 	DUAL_POL_V_ONLY:
// 		Dual pol, V transmission
// 		          simultaneous H and V receive.
//
// Type: enum
// Options:
//     SINGLE_POL
//     DUAL_POL_ALT_HV_CO_ONLY
//     DUAL_POL_ALT_HV_CO_CROSS
//     DUAL_POL_SIM_HV
//     DUAL_POL_H_ONLY
//     DUAL_POL_V_ONLY
//

xmit_rcv_mode = DUAL_POL_ALT_HV_CO_CROSS;

///////////// is_filtered /////////////////////////////
//
// Are these filtered covariances?.
// Type: boolean
//

is_filtered = FALSE;

///////////// atmos_attenuation ///////////////////////
//
// Atmospheric attenuation (dB/km).
// Reflectivity is corrected for this.
// Type: double
//

atmos_attenuation = 0.012;

///////////// correct_for_system_phidp ////////////////
//
// Option to correct for system phidp.
// If true, the H and V correlation phases will be corrected by 
//   adding/subtracting the system phidp value as appropriate. This avoids 
//   premature wrapping of the phased from which phidp and velocity are 
//   computed. If false, this correction will not be applied. To find the 
//   system phidp, set this to false and compute phidp for 
//   vertically-pointing data.
// Type: boolean
//

correct_for_system_phidp = TRUE;

///////////// change_velocity_sign ////////////////////
//
// Option to change sign on velocity field.
// Set to true to change the sign of the computed radial velocity field.
// Type: boolean
//

change_velocity_sign = FALSE;

///////////// use_hybrid_for_width ////////////////////
//
// Option to use the hybrid estimator for spectrum width, if applicable.
// In some modes, we can compute the spectrum width with the NCAR hybrid 
//   spectrum width estimator. If this is set, the hybrid width will be 
//   used for all modes except dual pol alternating mode.
// Type: boolean
//

use_hybrid_for_width = TRUE;

///////////// min_snr_db_for_zdr //////////////////////
//
// Min SNR for computing ZDR (dB).
// If the SNR is below this threshold, ZDR will be set to missing.
// Type: double
//

min_snr_db_for_zdr = -30;

///////////// min_snr_db_for_ldr //////////////////////
//
// Min SNR for computing LDR (dB).
// If the SNR is below this threshold, LDR will be set to missing.
// Type: double
//

min_snr_db_for_ldr = -30;

///////////// adjust_dbz_for_measured_xmit_power //////
//
// Option to adjust DBZ based on measured transmitter power.
// If true, and the measured transmitter power is available, the 
//   difference between the measured power and calibration power will be 
//   used to adjust the computed DBZ fields.
// Type: boolean
//

adjust_dbz_for_measured_xmit_power = FALSE;

///////////// adjust_zdr_for_measured_xmit_power //////
//
// Option to adjust ZDR based on measured transmitter power.
// If true, and the measured transmitter power is available, the 
//   difference between the measured power and calibration power will be 
//   used to adjust the computed ZDR fields.
// Type: boolean
//

adjust_zdr_for_measured_xmit_power = FALSE;

//======================================================================
//
// RADAR CALIBRATION XML FILES.
//
//======================================================================
 
///////////// cal_files ///////////////////////////////
//
// Specify the calibration file for each pulse width.
// First, the program will determine which of the specified pulse widths 
//   best matches the pulse width in the data. The closest match will be 
//   used to determine the cal file.

// NOTE - the pulse width is specified in micro-seconds.
//
// Type: struct
//   typedef struct {
//      double pulse_width_us;
//      string cal_file_path;
//   }
//
// 1D array - variable length.
//

cal_files = {
  {
    pulse_width_us = 1.0,
    cal_file_path = "$(PROJ_DIR)/moments/params/hcr_cal.xml"
  }
};

//======================================================================
//
// OPTION TO OVERRIDE RADAR LOCATION.
//
//======================================================================
 
///////////// override_radar_location /////////////////
//
// Option to override the radar location.
// If true, the location in this file will be used. If not, the location 
//   in the time series data will be used.
// Type: boolean
//

override_radar_location = FALSE;

///////////// radar_latitude_deg //////////////////////
//
// Radar latitude (deg).
// See override_radar_location.
// Type: double
//

radar_latitude_deg = -999;

///////////// radar_longitude_deg /////////////////////
//
// Radar longitude (deg).
// See override_radar_location.
// Type: double
//

radar_longitude_deg = -999;

///////////// radar_altitude_meters ///////////////////
//
// Radar altitude (meters).
// See override_radar_location.
// Type: double
//

radar_altitude_meters = -999;

//======================================================================
//
// SPECIFYING FIELD NAMES AND OUTPUT ENCODING.
//
//======================================================================
 
///////////// output_fields ///////////////////////////
//
// Indicate which fields should be written to the output file.
// Choose the ID from the list. The name and units can be set however 
//   the user prefers.
//
// Type: struct
//   typedef struct {
//      output_field_id_t id;
//        Options:
//          NCP
//          SNR
//          DBM
//          DBZ
//          DBZHC
//          DBZVC
//          DBZHX
//          DBZVX
//          VEL
//          WIDTH
//          ZDRM
//          ZDR
//          LDRHM
//          LDRH
//          LDRVM
//          LDRV
//          RHOHV
//          PHIDP0
//          PHIDP
//          KDP
//          SNRHC
//          SNRHX
//          SNRVC
//          SNRVX
//          DBMHC
//          DBMHX
//          DBMVC
//          DBMVX
//      string name;
//      string long_name;
//      string standard_name;
//      string units;
//      output_encoding_t encoding;
//        Options:
//          OUTPUT_ENCODING_FL32
//          OUTPUT_ENCODING_INT32
//          OUTPUT_ENCODING_INT16
//          OUTPUT_ENCODING_INT08
//   }
//
// 1D array - variable length.
//

output_fields = {
  {
    id = NCP,
    name = "NCP",
    long_name = "normalized_coherent_power",
    standard_name = "normalized_coherent_power",
    units = "",
    encoding = OUTPUT_ENCODING_FL32
  }
  ,
  {
    id = SNR,
    name = "SNR",
    long_name = "signal_to_noise_ratio_db",
    standard_name = "signal_to_noise_ratio",
    units = "dB",
    encoding = OUTPUT_ENCODING_FL32
  }
  ,
  {
    id = DBM,
    name = "DBM",
    long_name = "power_in_dbm",
    standard_name = "log_power",
    units = "dBm",
    encoding = OUTPUT_ENCODING_FL32
  }
  ,
  {
    id = DBZ,
    name = "DBZ",
    long_name = "radar_reflectivity",
    standard_name = "equivalent_reflectivity_factor",
    units = "dBZ",
    encoding = OUTPUT_ENCODING_FL32
  }
  ,
  {
    id = VEL,
    name = "VEL",
    long_name = "radial_velocity",
    standard_name = "radial_velocity_away_from_instrument",
    units = "m/s",
    encoding = OUTPUT_ENCODING_FL32
  }
  ,
  {
    id = WIDTH,
    name = "WIDTH",
    long_name = "doppler_spectrum_width",
    standard_name = "doppler_spectrum_width",
    units = "m/s",
    encoding = OUTPUT_ENCODING_FL32
  }
  ,
  {
    id = ZDRM,
    name = "ZDRM",
    long_name = "measured_log_differential_reflectivity",
    standard_name = "measured_log_differential_reflectivity",
    units = "dB",
    encoding = OUTPUT_ENCODING_FL32
  }
  ,
  {
    id = ZDR,
    name = "ZDR",
    long_name = "calibrated_log_differential_reflectivity",
    standard_name = "log_differential_reflectivity",
    units = "dB",
    encoding = OUTPUT_ENCODING_FL32
  }
  ,
  {
    id = LDRH,
    name = "LDRH",
    long_name = "linear_depolarization_ratio_h_channel",
    standard_name = "log_linear_depolarization_ratio_h",
    units = "dB",
    encoding = OUTPUT_ENCODING_FL32
  }
  ,
  {
    id = LDRV,
    name = "LDRV",
    long_name = "linear_depolarization_ratio_v_channel",
    standard_name = "log_linear_depolarization_ratio_v",
    units = "dB",
    encoding = OUTPUT_ENCODING_FL32
  }
  ,
  {
    id = RHOHV,
    name = "RHOHV",
    long_name = "cross_correlation_ratio",
    standard_name = "cross_correlation_ratio_hv",
    units = "",
    encoding = OUTPUT_ENCODING_FL32
  }
  ,
  {
    id = PHIDP,
    name = "PHIDP",
    long_name = "differential_phase",
    standard_name = "differential_phase_hv",
    units = "deg",
    encoding = OUTPUT_ENCODING_FL32
  }
  ,
  {
    id = KDP,
    name = "KDP",
    long_name = "specific_differential_phase",
    standard_name = "specific_differential_phase_hv",
    units = "deg/km",
    encoding = OUTPUT_ENCODING_FL32
  }
  ,
  {
    id = SNRHC,
    name = "SNRHC",
    long_name = "signal_to_noise_ratio_db_h_copol_channel",
    standard_name = "signal_to_noise_ratio_hc",
    units = "dB",
    encoding = OUTPUT_ENCODING_FL32
  }
  ,
  {
    id = SNRHX,
    name = "SNRHX",
    long_name = "signal_to_noise_ratio_db_h_crosspol_channel",
    standard_name = "signal_to_noise_ratio_hx",
    units = "dB",
    encoding = OUTPUT_ENCODING_FL32
  }
  ,
  {
    id = SNRVC,
    name = "SNRVC",
    long_name = "signal_to_noise_ratio_db_v_copol_channel",
    standard_name = "signal_to_noise_ratio_vc",
    units = "dB",
    encoding = OUTPUT_ENCODING_FL32
  }
  ,
  {
    id = SNRVX,
    name = "SNRVX",
    long_name = "signal_to_noise_ratio_db_v_crosspol_channel",
    standard_name = "signal_to_noise_ratio_vx",
    units = "dB",
    encoding = OUTPUT_ENCODING_FL32
  }
  ,
  {
    id = DBMHC,
    name = "DBMHC",
    long_name = "power_in_dbm_h_copol_channel",
    standard_name = "log_power_hc",
    units = "dBm",
    encoding = OUTPUT_ENCODING_FL32
  }
  ,
  {
    id = DBMHX,
    name = "DBMHX",
    long_name = "power_in_dbm_h_crosspol_channel",
    standard_name = "log_power_hx",
    units = "dBm",
    encoding = OUTPUT_ENCODING_FL32
  }
  ,
  {
    id = DBMVC,
    name = "DBMVC",
    long_name = "power_in_dbm_v_copol_channel",
    standard_name = "log_power_vc",
    units = "dBm",
    encoding = OUTPUT_ENCODING_FL32
  }
  ,
  {
    id = DBMVX,
    name = "DBMVX",
    long_name = "power_in_dbm_v_crosspol_channel",
    standard_name = "log_power_vx",
    units = "dBm",
    encoding = OUTPUT_ENCODING_FL32
  }
//   ,
//   {
//     id = ECHO_LAG0_HC_DB,
//     name = "LAG0_HC_DB",
//     long_name = "lag0_hc_db",
//     standard_name = "lag0_hc_db",
//     units = "dBm",
//     encoding = OUTPUT_ENCODING_FL32
//   }
//   ,
//   {
//     id = ECHO_LAG0_VC_DB,
//     name = "LAG0_VC_DB",
//     long_name = "lag0_vc_db",
//     standard_name = "lag0_vc_db",
//     units = "dBm",
//     encoding = OUTPUT_ENCODING_FL32
//   }
//   ,
//   {
//     id = ECHO_LAG0_HX_DB,
//     name = "LAG0_HX_DB",
//     long_name = "lag0_hx_db",
//     standard_name = "lag0_hx_db",
//     units = "dBm",
//     encoding = OUTPUT_ENCODING_FL32
//   }
//   ,
//   {
//     id = ECHO_LAG0_VX_DB,
//     name = "LAG0_VX_DB",
//     long_name = "lag0_vx_db",
//     standard_name = "lag0_vx_db",
//     units = "dBm",
//     encoding = OUTPUT_ENCODING_FL32
//   }
//   ,
//   {
//     id = ECHO_LAG0_HCVX_DB,
//     name = "LAG0_HCVX_DB",
//     long_name = "lag0_hcvx_db",
//     standard_name = "lag0_hcvx_db",
//     units = "dBm",
//     encoding = OUTPUT_ENCODING_FL32
//   }
//   ,
//   {
//     id = ECHO_LAG0_HCVX_PHASE,
//     name = "LAG0_HCVX_PHASE",
//     long_name = "lag0_hcvx_phase",
//     standard_name = "lag0_hcvx_phase",
//     units = "deg",
//     encoding = OUTPUT_ENCODING_FL32
//   }
//   ,
//   {
//     id = ECHO_LAG0_VCHX_DB,
//     name = "LAG0_VCHX_DB",
//     long_name = "lag0_vchx_db",
//     standard_name = "lag0_vchx_db",
//     units = "dBm",
//     encoding = OUTPUT_ENCODING_FL32
//   }
//   ,
//   {
//     id = ECHO_LAG0_VCHX_PHASE,
//     name = "LAG0_VCHX_PHASE",
//     long_name = "lag0_vchx_phase",
//     standard_name = "lag0_vchx_phase",
//     units = "deg",
//     encoding = OUTPUT_ENCODING_FL32
//   }
//   ,
//   {
//     id = ECHO_LAG1_HCVC_DB,
//     name = "LAG1_HCVC_DB",
//     long_name = "lag1_hcvc_db",
//     standard_name = "lag1_hcvc_db",
//     units = "dBm",
//     encoding = OUTPUT_ENCODING_FL32
//   }
//   ,
//   {
//     id = ECHO_LAG1_HCVC_PHASE,
//     name = "LAG1_HCVC_PHASE",
//     long_name = "lag1_hcvc_phase",
//     standard_name = "lag1_hcvc_phase",
//     units = "deg",
//     encoding = OUTPUT_ENCODING_FL32
//   }
//   ,
//   {
//     id = ECHO_LAG1_VCHC_DB,
//     name = "LAG1_VCHC_DB",
//     long_name = "lag1_vchc_db",
//     standard_name = "lag1_vchc_db",
//     units = "dBm",
//     encoding = OUTPUT_ENCODING_FL32
//   }
//   ,
//   {
//     id = ECHO_LAG1_VCHC_PHASE,
//     name = "LAG1_VCHC_PHASE",
//     long_name = "lag1_vchc_phase",
//     standard_name = "lag1_vchc_phase",
//     units = "deg",
//     encoding = OUTPUT_ENCODING_FL32
//   }
//   ,
//   {
//     id = ECHO_LAG1_HC_DB,
//     name = "LAG1_HC_DB",
//     long_name = "lag1_hc_db",
//     standard_name = "lag1_hc_db",
//     units = "dBm",
//     encoding = OUTPUT_ENCODING_FL32
//   }
//   ,
//   {
//     id = ECHO_LAG1_HC_PHASE,
//     name = "LAG1_HC_PHASE",
//     long_name = "lag1_hc_phase",
//     standard_name = "lag1_hc_phase",
//     units = "deg",
//     encoding = OUTPUT_ENCODING_FL32
//   }
//   ,
//   {
//     id = ECHO_LAG1_VC_DB,
//     name = "LAG1_VC_DB",
//     long_name = "lag1_vc_db",
//     standard_name = "lag1_vc_db",
//     units = "dBm",
//     encoding = OUTPUT_ENCODING_FL32
//   }
//   ,
//   {
//     id = ECHO_LAG1_VC_PHASE,
//     name = "LAG1_VC_PHASE",
//     long_name = "lag1_vc_phase",
//     standard_name = "lag1_vc_phase",
//     units = "deg",
//     encoding = OUTPUT_ENCODING_FL32
//   }
//   ,
//   {
//     id = ECHO_LAG2_HC_DB,
//     name = "LAG2_HC_DB",
//     long_name = "lag2_hc_db",
//     standard_name = "lag2_hc_db",
//     units = "dBm",
//     encoding = OUTPUT_ENCODING_FL32
//   }
//   ,
//   {
//     id = ECHO_LAG2_HC_PHASE,
//     name = "LAG2_HC_PHASE",
//     long_name = "lag2_hc_phase",
//     standard_name = "lag2_hc_phase",
//     units = "deg",
//     encoding = OUTPUT_ENCODING_FL32
//   }
//   ,
//   {
//     id = ECHO_LAG2_VC_DB,
//     name = "LAG2_VC_DB",
//     long_name = "lag2_vc_db",
//     standard_name = "lag2_vc_db",
//     units = "dBm",
//     encoding = OUTPUT_ENCODING_FL32
//   }
//   ,
//   {
//     id = ECHO_LAG2_VC_PHASE,
//     name = "LAG2_VC_PHASE",
//     long_name = "lag2_vc_phase",
//     standard_name = "lag2_vc_phase",
//     units = "deg",
//     encoding = OUTPUT_ENCODING_FL32
//   }
//   ,
//   {
//     id = ECHO_LAG3_HC_DB,
//     name = "LAG3_HC_DB",
//     long_name = "lag3_hc_db",
//     standard_name = "lag3_hc_db",
//     units = "dBm",
//     encoding = OUTPUT_ENCODING_FL32
//   }
//   ,
//   {
//     id = ECHO_LAG3_HC_PHASE,
//     name = "LAG3_HC_PHASE",
//     long_name = "lag3_hc_phase",
//     standard_name = "lag3_hc_phase",
//     units = "deg",
//     encoding = OUTPUT_ENCODING_FL32
//   }
//   ,
//   {
//     id = ECHO_LAG3_VC_DB,
//     name = "LAG3_VC_DB",
//     long_name = "lag3_vc_db",
//     standard_name = "lag3_vc_db",
//     units = "dBm",
//     encoding = OUTPUT_ENCODING_FL32
//   }
//   ,
//   {
//     id = ECHO_LAG3_VC_PHASE,
//     name = "LAG3_VC_PHASE",
//     long_name = "lag3_vc_phase",
//     standard_name = "lag3_vc_phase",
//     units = "deg",
//     encoding = OUTPUT_ENCODING_FL32
//   }
//   ,
//   {
//     id = ECHO_CPA,
//     name = "CPA",
//     long_name = "clutter_phase_alignment",
//     standard_name = "clutter_phase_alignment",
//     units = "",
//     encoding = OUTPUT_ENCODING_FL32
//   }
//   ,
//   {
//     id = ECHO_CMD_FLAG,
//     name = "CMD_FLAG",
//     long_name = "clutter_mitigation_decision_flag",
//     standard_name = "clutter_mitigation_decision_flag",
//     units = "deg",
//     encoding = OUTPUT_ENCODING_FL32
//   }
};

//======================================================================
//
// OUTPUT FILE FORMAT.
//
//======================================================================
 
///////////// output_format ///////////////////////////
//
// Format for the output files.
//
// Type: enum
// Options:
//     OUTPUT_FORMAT_CFRADIAL
//     OUTPUT_FORMAT_DORADE
//     OUTPUT_FORMAT_FORAY
//     OUTPUT_FORMAT_NEXRAD
//     OUTPUT_FORMAT_UF
//

output_format = OUTPUT_FORMAT_CFRADIAL;

///////////// netcdf_style ////////////////////////////
//
// NetCDF style - if output_format is CFRADIAL.
// netCDF classic format, netCDF 64-bit offset format, netCDF4 using 
//   HDF5 format, netCDF4 using HDF5 format but only netCDF3 calls.
//
// Type: enum
// Options:
//     CLASSIC
//     NC64BIT
//     NETCDF4
//     NETCDF4_CLASSIC
//

netcdf_style = CLASSIC;

//======================================================================
//
// OUTPUT BYTE-SWAPPING and COMPRESSION.
//
//======================================================================
 
///////////// output_native_byte_order ////////////////
//
// Option to leave data in native byte order.
// If false, data will be byte-swapped as appropriate on output.
// Type: boolean
//

output_native_byte_order = FALSE;

///////////// output_compressed ///////////////////////
//
// Option to compress data fields on output.
// Applies to netCDF and Dorade. UF does not support compression.
// Type: boolean
//

output_compressed = FALSE;

///////////// compression_level ///////////////////////
//
// Compression level for output, if compressed.
// Applies to netCDF only. Dorade compression is run-length encoding, 
//   and has not options..
// Type: int
//

compression_level = 9;

//======================================================================
//
// OUTPUT DIRECTORY AND FILE NAME.
//
//======================================================================
 
///////////// output_dir //////////////////////////////
//
// Output directory path.
// Files will be written to this directory.
// Type: string
//

output_dir = "$(DATA_DIR)/$(RADAR_NAME)/cfradial/mom_from_cov/wband/sur";
// output_dir = "$(DATA_DIR)/$(RADAR_NAME)/cfradial/mom_from_cov/wband/rhi";

///////////// compute_output_path_using_end_time //////
//
// Compute the output file name using the end time of the volume or 
//   sweep.
// If false, the start time will be used instead.
// Type: boolean
//

compute_output_path_using_end_time = TRUE;

///////////// append_day_dir_to_output_dir ////////////
//
// Add the day directory to the output directory.
// Path will be output_dir/yyyymmdd/filename.
// Type: boolean
//

append_day_dir_to_output_dir = TRUE;

///////////// append_year_dir_to_output_dir ///////////
//
// Add the year directory to the output directory.
// Path will be output_dir/yyyy/yyyymmdd/filename.
// Type: boolean
//

append_year_dir_to_output_dir = FALSE;

///////////// write_individual_sweeps /////////////////
//
// Option to write out individual sweeps if appropriate.
// If true, the volume is split into individual sweeps for writing. 
//   Applies to CfRadial format. This is always true for DORADE format 
//   files.
// Type: boolean
//

write_individual_sweeps = FALSE;

