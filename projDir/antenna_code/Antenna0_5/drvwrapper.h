//////////////////////////////////////////////////////////////////////
//
// Library for accessing the HIQ card,
// Code was generated by DriverWizard v6.23 - http://www.jungo.com.
// The library accesses the hardware via WinDriver functions.
// 
// Copyright (c) 2004 Jungo Ltd.  http://www.jungo.com
// 
//////////////////////////////////////////////////////////////////////
#ifndef _DRVWRAPPER_H_
#define _DRVWRAPPER_H_


#include "c:/windriver/include/windrvr.h"
#include "c:/windriver/include/windrvr_int_thread.h"
#include "c:/windriver/include/windrvr_events.h"
#include "c:/windriver/samples/shared/pci_regs.h"
#include "c:/windriver/samples/shared/bits.h"

#include "hiq.h"
#include "hiq_lib.h"
#include "hiq_dma.h"

#ifdef __cplusplus
extern "C" {
#endif



/* KPTODO: Obsolete?
enum
{
    HIQ_MODE_BYTE   = 0,
    HIQ_MODE_WORD   = 1,
    HIQ_MODE_DWORD  = 2,
    HIQ_MODE_QWORD  = 3
};
typedef DWORD HIQ_MODE;

enum
{
    HIQ_AD_BAR0 = AD_PCI_BAR0,
    HIQ_AD_BAR1 = AD_PCI_BAR1,
    HIQ_AD_BAR2 = AD_PCI_BAR2,
    HIQ_AD_BAR3 = AD_PCI_BAR3,
    HIQ_AD_BAR4 = AD_PCI_BAR4,
    HIQ_AD_BAR5 = AD_PCI_BAR5,
//    HIQ_AD_EPROM = AD_PCI_BAR_EPROM
};
typedef DWORD HIQ_ADDR;

// Number of IO and memory ranges
enum { HIQ_ITEMS = AD_PCI_BARS-1 };

typedef struct HIQ_STRUCT *HIQ_HANDLE;
*/


/* array of HiQ information for handling interrupts from multiple cards */
typedef struct {
	HIQ		*mH;		// card information for this card.
	FIFO	*mHIQ;		// fifo information for this card.
	DWORD	hCard;		// card Handle.
	int		intCnt;		// interrupt count. Rolls over from MAX to 0.  Never goes negative.
	int		intErrCnt;	// interrupt error count. Should never have to roll over.
	bool	isInSync;	// true= in sync; false= out of sync.
	int		angle_source;	// see angles.h
	uint8	pulsenum;	// pulse number since the Epoch.
	float	prt1;		// Long pulse interval time.
	float	prt2;		// Short pulse interval time.
	int		v_gate_offset;	// # of gates to adjust the vertical channel in order to align with the horizontal channel.
	bool	dual_prt;	// True if dual PRT, else False which implies single PRT.
	uint8	secs;		// UTC time, seconds.
	uint8	nanosecs;	// UTC time, fractional nanoseconds.
	int		ledCounter;	// toggle WatchDog LED on integration period count wrap.
} HIQ_INT_DATA; 

void LockFIFO(HIQ *hiq, FIFO *fifo);
void DMAListsetup(HIQ *hiq, FIFO *fifo, PHIQ_DEV_CTX pHiqDevCtx, int whichhiq);
WD_DMA *GetContiguousLockedMem(HIQ *hiq, int size);
WD_DMA *LockUserMem(void *buf, int size);

// If an error occurs, this string will be set to contain a relevant error message
extern CHAR HIQ_ErrorString[];

void HIQ_setDeviceContext(int whichhiq, HIQ *hiq, FIFO *fifo, PHIQ_DEV_CTX pHiqDevCtx);
void HIQ_disableint(HIQ *hiq, int whichhiq);
bool HIQ_enableint(int whichhiq, HIQ *hiq, FIFO *fifo);
//void HIQ_DebugSetup();
//void HIQ_DebugMsg(HIQ_HANDLE hHIQ, char* pDbgMsg, DEBUG_LEVEL aLevel, DEBUG_SECTION aSection);
//int getHiqIntData(DWORD hCard);

//void HIQ_PCIINT_debug_card_display( HIQ_HANDLE hHIQ );
void HIQ_DmaDoneCompute( WDC_DEVICE_HANDLE hDev, HIQ_INT_RESULT *pIntResult );
int HIQ_getIntCnt( int whichhiq );
int HIQ_getIntErrCnt( int whichhiq );
bool HIQ_isInSync( int whichhiq );
void setAngleSource(int whichhiq, int anAngleSource);
int getAngleSource(int whichhiq);

HIQ_INT_DATA *getHiq_Int_Data(int whichhiq);
int getWhichhiqHiqIntData(DWORD desired_hCard);

#ifdef __cplusplus
}
#endif

#endif	// _DRVWRAPPER_H_
