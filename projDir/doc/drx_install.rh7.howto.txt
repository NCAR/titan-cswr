# Preparing a DRX host for the DOW Pentek system
# ==============================================
# 
# OS: RH7
#
# Hardware
# --------
# 
# This is generally a Trenton 4U machine.
# 
# RAID controller:
#
#   Move to 8x slot out next to power supply.
#
# Video card:
# 
#   Install Nvidia graphics card, e.g. Zotac GeForce GT 710
#   Install in a x16 slot.
# 
# Penteks:
# 
#   Install in x8 slots, separated a bit because of heat.
#
#   IMPORTANT: on Pentek PCIe carrier card:
#     (a) Move jumper JB9 to pins 1/2. (Int A)
#     (b) Load updated PCI image to flash memory.
#     (c) Load DDC10 image to flash memory. 
# 
# Acromag:
# 
#   Install in x4 slot.
#
# Connect the ribbon cables to the Penteks.
# 
# BIOS
# ----
# 
#   Set to boot from USB.
# 
# Install OS from USB
# -------------------
# 
# The following notes are from the install for Scientific LINUX 7.4:
# 
#   English keyboard
#   Time: GMT
#   Hostname: drx
#   
#   Create custom disk partition layout:
# 
#    /swap      16 GB
#    /boot      1  GB
#    /boot-EFI  1  GB
#    /          50 GB
#    /home      50 GB
#    /data      the rest
# 
#   Type of install:
#     KDE Plasma workstation
#     KDE utilities
#     add development tools
#     add open office
#
#   After install:
#   
#     Perform software update from menu.
#   
#   Add titan5 user:
# 
#     Add user titan5
#     Change titan5 shell to /bin/csh using 'chsh'.

# Install packages
# ----------------

# You can install these with these commands

yum install -y epel-release

yum install -y \
tcsh perl perl-Env ftp git svn cvs tkcvs emacs tkcvs m4 \
gcc gcc-c++ gcc-gfortran glibc-devel libX11-devel libXext-devel \
libpng-devel libtiff-devel jasper-devel zlib-devel bzip2-devel expat-devel \
flex-devel fftw3-devel bzip2-devel jasper-devel qt5-qtbase-devel xrdb \
Xvfb xorg-x11-fonts-misc xorg-x11-fonts-75dpi xorg-x11-fonts-100dpi \
gnuplot ImageMagick-devel ImageMagick-c++-devel log4cpp-devel \
qwt-devel glut-devel compat-libstdc++-296.i686 \
compat-libstdc++-33.i686 boost-devel \
perl-Env kernel-devel gnuplot scons

# Install NVIDIA driver
# ---------------------
#
# See:
#
#  https://www.dedoimedo.com/computers/centos-7-nvidia-second.html
#  http://elrepo.org/tiki/tiki-index.php

  rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org
  yum install -y http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm
  yum install -y nvidia-detect.x86_64
  yum install -y kmod-nvidia-340xx.x86_64 nvidia-x11-drv-340xx.x86_64

# this last step takes a while

  reboot

# QT
# --

# Make link for qmake

  cd /usr/bin
  ln -s qmake-qt5 qmake

# Install anaconda for python 2.7
---------------------------------

Go to the anaconda web site:

  https://www.continuum.io/downloads

download anaconda2 and install in $HOME.

# disable unwanted services - firewall
--------------------------------------

  systemctl disable ip6tables
  systemctl disable iptables
  systemctl disable firewalld

# disable SELINUX
-----------------

In

  /etc/sysconfig/selinux

set

  SELINUX=disabled

# set up chronyd
----------------

# Edit:

  /etc/chrony.conf

# and at the top set:

  server ntp iburst
  server 0.centos.pool.ntp.org iburst
  server 1.centos.pool.ntp.org iburst
  etc ...

# Install Java JDK
# ----------------

# Download Java JDK tar file from Oracle.

# For example: 

  jdk-8u72-linux-x64.tar.gz

# As root:

  mkdir /usr/java
  cd /usr/java
  cp jdk-8u72-linux-x64.tar.gz .
  tar xvfz jdk-8u72-linux-x64.tar.gz
  ln -s jdk1.8.0_72 latest

# So that you can reference java using:

  /usr/java/latest/bin/java

# and JAVA_HOME will be set to:

  setenv JAVA_HOME /usr/java/latest

# Install ant
# -----------

# Download ant from:

  http://ant.apache.org

# Normally we grab the .gz file, e.g. apache-ant-1.9.4-bin.tar.gz
# Untar the file and copy the contents to

  /usr/local/ant

# Check out LROSE
# ---------------

  mkdir ~/git
  cd ~/git
  git clone https://github.com/ncar/lrose-core
  git clone https://github.com/ncar/lrose-netcdf

# Check out titan cswr project
# ----------------------------

  cd ~/git
  git clone https://github.com/ncar/titan-cswr

# set up cshrc file
# -----------------

  cd
  rm .cshrc
  ln -s git/titan-cswr/projDir/system/dotfiles/cshrc .cshrc
  source ~/.cshrc

# Build LROSE
# -----------

  cd ~/git/lrose-netcdf
  ./build_and_install_netcdf

  cd ~/git/lrose-core
  ./build/build_lrose.ncar
  
# Link /usr/local/lrose
# ---------------------

# As root:

  cd /usr/local
  ln -s ~titan5/lrose
  
# Check out dowdrx project from git
# ---------------------------------

# Note - this will require access to gitlab.eol.ucar.edu because
# the ReadyFlow code is stored there

  cd ~/git
  git clone https://github.com/ncar/titan-dowdrx

  cd titan-dowdrx
  git submodule init
  git submodule update

# Update firmware on Penteks to support option 428
# ------------------------------------------------

# As shipped, the Penteks do not natively support
# option 428, which is needed for our downconverters.

# Therefore, the firmware for Option 428 must be uploaded
# to the Penteks before use.

# Install Windriver for Pentek Readyflow
# --------------------------------------

# As root, perform the following:

  cd /usr/local
  cp ~titan5/git/titan-dowdrx/drivers/WinDriver1150_64.tgz .
  tar xvfz WinDriver1150_64.tgz
  cd WinDriver1150_64/redist
  ./configure  --with-kernel-source=/lib/modules/`uname -r`/build
  make
  make install

# Add the following to /etc/rc.local

  rmmod windrvr6
  /usr/local/WinDriver1150_64/redist/wdreg windrvr6 auto
  chmod 666 /dev/windrvr6

# You also need to change the permissions on the library files, to make
# them readable.

  cd /usr/local/WinDriver1150_64/lib/
  chmod +r *

# Compile ReadyFlow
# -----------------

# set environment for building ReadyFlow

  setenv READYFLOW_7142_428_LINUX ~/git/titan-dowdrx/src/ReadyFlow/linux/1.0

# build lib

  cd $READYFLOW_7142_428_LINUX/x86_64/lib
  make

# make fpgaload

  cd $READYFLOW_7142_428_LINUX/x86_64/examples
  make

# install fpgaload

  cp fpgaload.out ~/lrose/bin/fpgaload

# Install Acromag PMC730 driver
# -----------------------------

# As root:

  cd /usr/local
  mkdir Acromag
  cd Acromag
  cp ~titan5/git/titan-dowdrx/drivers/pmc730_20141208.tgz .
  tar xvfz pmc730_20141208.tgz
  cd pmc730/dev730
  make
  cp apmc730.ko /lib/modules/`uname -r`/kernel/drivers
  sudo depmod -a

# You can also build some testing utilities, but it isn't necessary:

  cd ..
  make

# Add the following lines to /etc/rc.local to create device nodes and
# load the driver module at boot time:

  #Acromag apmc730
  if [ ! -r /dev/apmc730_0 ]; then
    /bin/mknod -m 666 /dev/apmc730_0 c 46 0 #(1st PMC board)
    /bin/mknod -m 666 /dev/apmc730_1 c 46 1 #(2nd PMC board)
    /bin/mknod -m 666 /dev/apmc730_2 c 46 2 #(3rd PMC board)
    /bin/mknod -m 666 /dev/apmc730_3 c 46 3 #(4th PMC board)
  fi
  /usr/sbin/modprobe apmc730

# Ensure /etc/rc.local is executable
# ----------------------------------

# As root:

  cd /etc/rc.d
  chmod +x rc.local

# Compile dowdrx
# --------------

  cd ~/git/titan-dowdrx/src/dowdrx
  scons -u -j 8
  cp dowdrx ~/lrose/bin

# Compile pentek utilities
# ------------------------

  cd ~/git/titan-dowdrx/src/Pentek7142/test
  scons -u
  cp toggle_7142_leds ~/lrose/bin

# Build the java DowControl GUI
# -----------------------------

  cd ~/git/titan-dowdrx/java/src/edu/ucar/rap/titan/DowControl
  ant dist

  cd ~/git/titan-dowdrx/java/src/edu/ucar/rap/titan/RapidDowControl
  ant dist

# Configure project
# -----------------

  sudo mkdir -p /data/dow
  sudo chown titan5 /data/dow

  cd ~/git/titan-cswr/projDir/system/scripts
  ./configureHost.py

# select host type 'drx'

  source ~/.cshrc


